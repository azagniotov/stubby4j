<?xml version="1.0"?>
<ruleset name="Loki" xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

   <description>PMD rule set to check code for errors and bad habits</description>

   <!-- unused code -->

   <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedModifier">
      <priority>5</priority>
   </rule>

   <!-- unnecessary code -->

   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary"/>
   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryReturn"/>
   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryFinalModifier"/>
   <rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod"/>
   <rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals">
      <priority>3</priority>
   </rule>

   <!-- basic rules -->

   <rule ref="rulesets/java/basic.xml/JumbledIncrementer"/>
   <rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop"/>
   <rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode"/>
   <rule ref="rulesets/java/basic.xml/DoubleCheckedLocking"/>
   <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock"/>
   <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/basic.xml/BooleanInstantiation"/>
   <rule ref="rulesets/java/basic.xml/CollapsibleIfStatements"/>
   <rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray"/>
   <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
   <rule ref="rulesets/java/basic.xml/MisplacedNullCheck"/>
   <rule ref="rulesets/java/basic.xml/AvoidThreadGroup"/>
   <rule ref="rulesets/java/basic.xml/BrokenNullCheck">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation"/>
   <rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues"/>
   <rule ref="rulesets/java/basic.xml/AvoidUsingHardCodedIP"/>
   <rule ref="rulesets/java/basic.xml/CheckResultSet"/>
   <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators"/>
   <rule ref="rulesets/java/basic.xml/ExtendsObject"/>
   <rule ref="rulesets/java/basic.xml/CheckSkipResult"/>
   <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop"/>
   <rule ref="rulesets/java/basic.xml/DontCallThreadRun"/>
   <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices"/>

   <!-- design rules -->

   <rule ref="rulesets/java/design.xml/UseSingleton"/>
   <rule ref="rulesets/java/design.xml/SimplifyBooleanReturns"/>
   <rule ref="rulesets/java/design.xml/SimplifyBooleanExpressions"/>
   <rule ref="rulesets/java/design.xml/SwitchStmtsShouldHaveDefault"/>
   <rule ref="rulesets/java/design.xml/AvoidDeeplyNestedIfStmts"/>
   <rule ref="rulesets/java/design.xml/AvoidReassigningParameters"/>
   <rule ref="rulesets/java/design.xml/SwitchDensity">
      <priority>2</priority>
      <properties>
            <property name="minimum" value="5"/>
      </properties>
   </rule>
   <rule ref="rulesets/java/design.xml/ConstructorCallsOverridableMethod"/>
   <rule ref="rulesets/java/design.xml/AccessorClassGeneration"/>
   <rule ref="rulesets/java/design.xml/FinalFieldCouldBeStatic">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/CloseResource"/>
   <!-- <rule ref="rulesets/java/design.xml/NonStaticInitializer"/> -->
   <rule ref="rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt"/>
   <rule ref="rulesets/java/design.xml/NonCaseLabelInSwitchStatement"/>
   <rule ref="rulesets/java/design.xml/OptimizableToArrayCall"/>
   <rule ref="rulesets/java/design.xml/BadComparison"/>
   <rule ref="rulesets/java/design.xml/EqualsNull">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/InstantiationToGetClass"/>
   <rule ref="rulesets/java/design.xml/IdempotentOperations"/>
   <rule ref="rulesets/java/design.xml/SimpleDateFormatNeedsLocale"/>
   <rule ref="rulesets/java/design.xml/ImmutableField"/>
   <rule ref="rulesets/java/design.xml/UseLocaleWithCaseConversions"/>
   <rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass"/>
   <rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic"/>
   <rule ref="rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass"/>
   <rule ref="rulesets/java/design.xml/MissingBreakInSwitch"/>
   <rule ref="rulesets/java/design.xml/UseNotifyAllInsteadOfNotify"/>
   <rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause"/>
   <rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod"/>
   <rule ref="rulesets/java/design.xml/SimplifyConditional"/>
   <rule ref="rulesets/java/design.xml/CompareObjectsWithEquals"/>
   <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons"/>
   <rule ref="rulesets/java/design.xml/UnnecessaryLocalBeforeReturn"/>
   <rule ref="rulesets/java/design.xml/NonThreadSafeSingleton"/>
   <!--
   <rule ref="rulesets/java/design.xml/UncommentedEmptyMethod"/>
   <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor"/>
   -->
   <rule ref="rulesets/java/design.xml/AvoidConstantsInterface"/>
   <rule ref="rulesets/java/design.xml/UnsynchronizedStaticDateFormatter"/>
   <rule ref="rulesets/java/design.xml/PreserveStackTrace"/>
   <rule ref="rulesets/java/design.xml/UseCollectionIsEmpty"/>
   <rule ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
   <rule ref="rulesets/java/design.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
   <rule ref="rulesets/java/design.xml/SingularField">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull"/>
   <rule ref="rulesets/java/design.xml/AbstractClassWithoutAnyMethod"/>
   <rule ref="rulesets/java/design.xml/TooFewBranchesForASwitchStatement"/>
   <rule ref="rulesets/java/design.xml/LogicInversion"/>
   <rule ref="rulesets/java/design.xml/UseVarargs"/>
   <rule ref="rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass"/>
   <rule ref="rulesets/java/design.xml/GodClass"/>

   <!-- rules that perform type resolution -->

   <rule ref="rulesets/java/typeresolution.xml/LooseCoupling"/>
   <rule ref="rulesets/java/typeresolution.xml/CloneMethodMustImplementCloneable"/>
   <rule ref="rulesets/java/typeresolution.xml/SignatureDeclareThrowsException">
      <properties>
         <property name="IgnoreJUnitCompletely" value="true"/>
      </properties>
   </rule>

   <!-- string and string buffer handling -->

   <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals">
      <properties>
         <property name="skipAnnotations" value="true"/>
      </properties>
   </rule>
   <rule ref="rulesets/java/strings.xml/StringInstantiation"/>
   <rule ref="rulesets/java/strings.xml/StringToString"/>
   <rule ref="rulesets/java/strings.xml/InefficientStringBuffering"/>
   <rule ref="rulesets/java/strings.xml/UnnecessaryCaseChange"/>
   <rule ref="rulesets/java/strings.xml/UseStringBufferLength">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/strings.xml/AppendCharacterWithChar"/>
   <rule ref="rulesets/java/strings.xml/UseIndexOfChar">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/strings.xml/UselessStringValueOf">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/strings.xml/StringBufferInstantiationWithChar"/>
   <rule ref="rulesets/java/strings.xml/UseEqualsToCompareStrings"/>
   <rule ref="rulesets/java/strings.xml/AvoidStringBufferField"/>

   <!-- naming -->

   <rule ref="rulesets/java/naming.xml/ShortVariable">
      <priority>5</priority>
   </rule>
   <rule ref="rulesets/java/naming.xml/LongVariable">
      <priority>5</priority>
      <properties>
         <property name="minimum" value="25"/>
      </properties>
   </rule>
   <rule ref="rulesets/java/naming.xml/ShortMethodName">
      <priority>5</priority>
   </rule>
   <rule ref="rulesets/java/naming.xml/VariableNamingConventions"/>
   <rule ref="rulesets/java/naming.xml/MethodNamingConventions"/>
   <rule ref="rulesets/java/naming.xml/ClassNamingConventions"/>
   <rule ref="rulesets/java/naming.xml/AbstractNaming"/>
   <rule ref="rulesets/java/naming.xml/AvoidDollarSigns">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
   <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/>
   <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/>
   <rule ref="rulesets/java/naming.xml/NoPackage"/>
   <rule ref="rulesets/java/naming.xml/PackageCase"/>
   <rule ref="rulesets/java/naming.xml/MisleadingVariableName">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/>
   <rule ref="rulesets/java/naming.xml/ShortClassName"/>
   <rule ref="rulesets/java/naming.xml/GenericsNaming"/>

   <!-- optimizations -->

   <rule ref="rulesets/java/optimizations.xml/LocalVariableCouldBeFinal">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/MethodArgumentCouldBeFinal">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector"/>
   <rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith"/>
   <rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends"/>
   <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
   <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/AddEmptyString">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/RedundantFieldInitializer">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/PrematureDeclaration">
      <priority>4</priority>
   </rule>

   <!-- exception handling -->

   <rule ref="rulesets/java/strictexception.xml/AvoidCatchingThrowable">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/ExceptionAsFlowControl"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNullPointerException"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError"/>
   <rule ref="rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidCatchingGenericException"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidLosingExceptionInformation"/>

   <!-- empty code -->

   <rule ref="rulesets/java/empty.xml/EmptyCatchBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptyIfStmt">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/empty.xml/EmptyWhileStmt">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/empty.xml/EmptyTryBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptyFinallyBlock">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/empty.xml/EmptySwitchStatements"/>
   <rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop"/>
   <rule ref="rulesets/java/empty.xml/EmptyInitializer"/>
   <rule ref="rulesets/java/empty.xml/EmptyStatementBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptyStaticInitializer"/>

   <!-- braces -->

   <rule ref="rulesets/java/braces.xml/IfStmtsMustUseBraces"/>
   <rule ref="rulesets/java/braces.xml/WhileLoopsMustUseBraces"/>
   <rule ref="rulesets/java/braces.xml/IfElseStmtsMustUseBraces"/>
   <rule ref="rulesets/java/braces.xml/ForLoopsMustUseBraces"/>

   <!-- coupling -->

   <rule ref="rulesets/java/coupling.xml/LawOfDemeter">
      <priority>2</priority>
   </rule>

   <!-- codesize -->

   <rule ref="rulesets/java/codesize.xml/NPathComplexity">
      <priority>1</priority>
      <properties>
            <property name="minimum" value="175"/>
      </properties>
   </rule>
   <rule ref="rulesets/java/codesize.xml/ExcessiveMethodLength">
      <priority>2</priority>
   </rule>
   <rule ref="rulesets/java/codesize.xml/ExcessiveParameterList">
      <priority>2</priority>
      <properties>
            <property name="minimum" value="5"/>
      </properties>
   </rule>
   <rule ref="rulesets/java/codesize.xml/CyclomaticComplexity">
      <priority>1</priority>
      <properties>
            <property name="reportLevel" value="10"/>
            <property name="showClassesComplexity" value="false"/>
      </properties>
   </rule>
   <rule ref="rulesets/java/codesize.xml/NcssMethodCount"/>
   <rule ref="rulesets/java/codesize.xml/TooManyMethods"/>

   <!-- imports -->

   <rule ref="rulesets/java/imports.xml/DuplicateImports"/>
   <rule ref="rulesets/java/imports.xml/DontImportJavaLang"/>
   <rule ref="rulesets/java/imports.xml/UnusedImports"/>
   <rule ref="rulesets/java/imports.xml/ImportFromSamePackage"/>
   <rule ref="rulesets/java/imports.xml/UnnecessaryFullyQualifiedName">
      <priority>5</priority>
   </rule>
   <rule ref="rulesets/java/imports.xml/TooManyStaticImports">
      <priority>5</priority>
   </rule>

</ruleset>

