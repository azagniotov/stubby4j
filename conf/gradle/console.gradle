tasks.withType(Test) {
    Task testTask ->
    ignoreFailures = false
    testLogging {
       events /*"passed", */"skipped", "failed"
       exceptionFormat "full"
       showExceptions true
       showCauses true
       showStackTraces true
    }
    beforeTest { testDescriptor ->
      if (testDescriptor.getClassName().contains("$stubbyProjectGroup")) {
         def subproject = project.name.toUpperCase()
         def testClass = testDescriptor.getClassName()
         if (project(':').ext.map[subproject] == null) {
            project(':').ext.map[subproject] = [:]
            project(':').ext.map[subproject]['total'] = 0
            project(':').ext.map[subproject]['success'] = 0
            project(':').ext.map[subproject]['failure'] = 0
         }
         if (project(':').ext.map[subproject][testClass] == null) {
            project(':').ext.map[subproject][testClass] = [:]
            project(':').ext.map[subproject][testClass]['total'] = 1
            project(':').ext.map[subproject][testClass]['success'] = 0
            project(':').ext.map[subproject][testClass]['failure'] = 0
         } else {
            project(':').ext.map[subproject][testClass]['total'] += 1
         }
         project(':').ext.map[subproject]['total'] += 1
      }
    }
    afterTest { testDescriptor, testResult ->
       if (testDescriptor.getClassName().contains("$stubbyProjectGroup")) {
          def subproject = project.name.toUpperCase()
          def testClass = testDescriptor.getClassName()
          def success = testResult.getSuccessfulTestCount();
          def failure = testResult.getFailedTestCount()
          if (success == 1) {
            project(':').ext.map[subproject][testClass]['success'] += success
            project(':').ext.map[subproject]['success'] += success
          } else if (failure == 1) {
            project(':').ext.map[subproject][testClass]['failure'] += failure
            project(':').ext.map[subproject]['failure'] += failure
          }
       }
    }
}

