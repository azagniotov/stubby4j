apply plugin: 'com.github.kt3k.coveralls'

configurations {
    coberturaRuntime { extendsFrom testRuntime }
}

dependencies {
    coberturaRuntime 'net.sourceforge.cobertura:cobertura:2.1.1'
}

task coberturaPrepare() {
    ext.datafileLocation = project(":main").buildDir.path + "/cobertura.ser"
    doLast {
        ant.taskdef(
                name: 'coberturaInstrument',
                classname: 'net.sourceforge.cobertura.ant.InstrumentTask',
                classpath: configurations.coberturaRuntime.asPath
        )

        ant.taskdef(
                name: 'coberturaReport',
                classname: 'net.sourceforge.cobertura.ant.ReportTask',
                classpath: configurations.coberturaRuntime.asPath
        )
    }
}

task coberturaInstrument(dependsOn: ['classes', 'coberturaPrepare']) {
    def root = "io/github/azagniotov/stubby4j"
    ext.outputDir = project(":main").buildDir.path + "/classes-instrumented"
    doLast {
        ant.coberturaInstrument(
                ignoreTrivial: true,
                todir: outputDir,
                datafile: coberturaPrepare.datafileLocation) {
            ignoreMethodAnnotation(
                    annotationName: "io.github.azagniotov.stubby4j.annotations.CoberturaIgnore"
            )
            fileset(
                    dir: project(':main').sourceSets.main.output.classesDirs.asPath,
                    excludes: "${root}/caching/**/*.class, ${root}/client/StubbyClient*.class, ${root}/yaml/YamlBuilder*.class, ${root}/yaml/YamlParseResultSet.class, **/*\$1.class, **/*\$2.class",
                    includes: "${root}/client/**/*.class, " +
                            "${root}/cli/CommandLineInterpreter.class, " +
                            "${root}/utils/*.class, " +
                            "${root}/yaml/**/*.class, " +
                            "${root}/stubs/**/*.class, " +
                            "${root}/stubs/**/Stub*\$Builder.class, " +
                            "${root}/handlers/AjaxHandler.class, " +
                            "${root}/handlers/strategy/**/*.class"
            )
        }
    }
}

task coberturaReport(dependsOn: ['coberturaInstrument', test]) {
    doLast {
        ant.coberturaReport(
                format: "html",
                destdir: project(":main").reporting.baseDir.path + "/cobertura/html",
                srcdir: "$rootDir/main/java",
                datafile: coberturaPrepare.datafileLocation
        )
        ant.coberturaReport(
                format: "xml",
                destdir: project(":main").reporting.baseDir.path + "/cobertura/xml",
                srcdir: "$rootDir/main/java",
                datafile: coberturaPrepare.datafileLocation
        )
    }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(cobertura)) {
        tasks.withType(Test) {
            doFirst {
                systemProperty 'net.sourceforge.cobertura.datafile', coberturaPrepare.datafileLocation
                classpath = files(coberturaInstrument.outputDir) + classpath + configurations.coberturaRuntime
            }
        }
    }
}

tasks.coveralls {
    def factory = project(':').ext.coberturaSourceReportFactory
    sourceReportFactoryMap[
            file(project(":main").reporting.baseDir.path + "/cobertura/xml/coverage.xml").absolutePath] = factory
}

task cobertura {
    dependsOn = ['clean', 'coberturaReport']
}
