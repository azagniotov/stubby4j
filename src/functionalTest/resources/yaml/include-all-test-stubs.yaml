- request:
    method:
      - GET
      - POST
      - PUT
    url: ^/resources/asn/.*$

  response:
    status: 200
    body: >
      {"status": "ASN found!"}
    headers:
      content-type: application/json


- request:
    method:
      - GET
      - POST
      - PUT
    url: /this/stub/should/always/be/second/in/this/file

  response:
    status: 200
    body: OK
    headers:
      content-type: application/json


- request:
    method: [GET, POST, PUT]
    url: ^/[a-z]{3}-[a-z]{3}/[0-9]{2}/[A-Z]{2}/[a-z0-9]+\?paramOne=[a-zA-Z]{3,8}&paramTwo=[a-zA-Z]{3,8}$

  response:
    status: 200
    body: >
      {"status": "The regex with query params works!"}
    headers:
      content-type: application/json

- request:
    method: GET
    url: ^/[a-z]{3}-[a-z]{3}/[0-9]{2}/[A-Z]{2}/[a-z0-9]+$

  response:
    status: 200
    body: >
      {"status": "The regex works!"}
    headers:
      content-type: application/json

- request:
    method: GET
    url: /entity.find.again
    query:
      type_name: user
      client_id: id
      client_secret: secret
      attributes: '[id,uuid,created,lastUpdated,displayName,email,givenName,familyName]'

  response:
    status: 200
    body: >
      {"status": "hello world"}
    headers:
      content-type: application/json


- request:
    method: GET
    url: /entity.find
    query:
      type_name: user
      client_id: id
      client_secret: secret
      attributes: '["id","uuid","created","lastUpdated","displayName","email","givenName","familyName"]'

  response:
    status: 200
    body: >
      {"status": "hello world"}
    headers:
      content-type: application/json


- request:
    method: GET
    url: /entity.find.single.quote
    query:
      type_name: user
      client_id: id
      client_secret: secret
      attributes: "['id','uuid','created','lastUpdated','displayName','email','givenName','familyName']"

  response:
    status: 200
    body: >
      {"status": "hello world with single quote"}
    headers:
      content-type: application/json


- request:
    method: GET
    url: /entity.find.spaces.within
    query:
      key: "stalin and truman are best buddies"

  response:
    status: 200
    body: >
      {"status": "hello world with spaces within values"}
    headers:
      content-type: application/json


- request:
    method: GET
    url: /entity.find.single.quote.spaces.within
    query:
      key: "['stalin and truman','are best friends']"

  response:
    status: 200
    body: >
      {"status": "hello world with single quote and spaces within"}
    headers:
      content-type: application/json


- request:
    method: GET
    url: /pdf/hello-world

  response:
    headers:
      content-type: application/pdf
      content-disposition: attachment; filename=hello-world.pdf
      pragma: no-cache
    status: 200
    file: ../binary/hello-world.pdf


- request:
    method: GET
    url: /invoice
    query:
      status: active
      type: full
  response:
    headers:
      content-type: application/json
      pragma: no-cache
    status: 200
    file: ../json/response/json_response_1.json


- request:
    method: PUT
    url: /invoice/123
    headers:
      content-type: application/json
    post: >
      {"name": "milk", "description": "full", "department": "savoury"}

  response:
    headers:
      content-type: application/json
      pragma: no-cache
    status: 200
    body: >
      {"id": "123", "status": "updated"}


- request:
    method: POST
    url: /invoice/new
    headers:
      content-type: application/json
    post: >
      {"name": "chocolate", "description": "full", "department": "savoury"}

  response:
    headers:
      content-type: application/json
      pragma: no-cache
    status: 201
    body: >
      {"id": "456", "status": "created"}


- request:
    method: POST
    url: /jsonapi-json-object-comparison
    headers:
      content-type: application/json
    file: ../json/request/json_payload_1.json

  response:
    headers:
      content-type: application/json
    status: 200
    body: >
      {"status": "OK"}


- request:
    url: /invoice/new/no/post
    method: POST
  response:
    status: 204

- request:
    method: POST
    url: /item/path
    query:
      paramTwo: 12345
      paramOne: valueOne

  response:
    status: 201
    body: OK


- request:
    method: GET
    url: /atomfeed/1

  response:
    headers:
      content-type: application/xml
    status: 200
    body: <?xml version="1.0" encoding="UTF-8"?><payment><invoiceTypeLookupCode>STANDARD</invoiceTypeLookupCode><invoiceDate>2012-06-27 14:51:26.416 PDT</invoiceDate><invoiceAmount>880.10</invoiceAmount><poNumber>1000054</poNumber><invoiceNumber>23423423</invoiceNumber><invoiceCurrencyCode>USD</invoiceCurrencyCode><vendorNumber>12345</vendorNumber><paymentDetails><paymentDetail><lineNumber>123</lineNumber><amount>20.10</amount><invoiceDate>2012-06-27 14:51:26.417 PDT</invoiceDate><legalEntity>100</legalEntity><coaDivision>10</coaDivision><coaAccount>2451</coaAccount><coaDepartment>9101</coaDepartment><coaArea>90005</coaArea><coaMerch>0000</coaMerch><coaInterUnit>000</coaInterUnit><coaFutureUse>0000</coaFutureUse><lineTypeLookupCode>ITEM</lineTypeLookupCode><taxCode /></paymentDetail><paymentDetail><lineNumber>124</lineNumber><amount>80.10</amount><invoiceDate>2012-06-27 14:51:26.417 PDT</invoiceDate><legalEntity>100</legalEntity><coaDivision>10</coaDivision><coaAccount>2451</coaAccount><coaDepartment>9101</coaDepartment><coaArea>90005</coaArea><coaMerch>0000</coaMerch><coaInterUnit>000</coaInterUnit><coaFutureUse>0000</coaFutureUse><lineTypeLookupCode>TEXT</lineTypeLookupCode><taxCode>VAT10</taxCode></paymentDetail></paymentDetails></payment>


- request:
    method: GET
    url: /item/1

  response:
    headers:
      content-type: application/json
    status: 200
    body: >
      {"id" : "1", "description" : "milk"}


- request:
    headers:
      authorization-basic: bob:secret
    method: GET
    url: /item/auth

  response:
    headers:
      content-type: application/json
    status: 200
    body: >
      {"id" : "8", "description" : "authorized using basic"}


- request:
    headers:
      authorization-bearer: Ym9iOndyb25nLXNlY3JldA==
    method: GET
    url: /item/auth/bearer

  response:
    headers:
      content-type: application/json
    status: 200
    body: >
      {"id" : "12", "description" : "authorized using bearer"}


- request:
    headers:
      authorization-custom: CustomAuthorizationName Ym9iOndyb25nLXNlY3JldA==
    method: GET
    url: /item/auth/custom

  response:
    headers:
      content-type: application/json
    status: 200
    body: >
      {"id" : "12", "description" : "authorized using custom"}


- request:
    method: POST
    url: /item/1
    post: post body

  response:
    headers:
      content-type: text/plain
    status: 200
    body: Got post response


- request:
    method: [GET]
    url: ^/feeds/payment[sz]$
    query:
      start-index: \d+
      max-records: \d+

  response:
    headers:
      content-type: text/plain
    status: 200
    body: Got response


- request:
    headers:
      authorization-basic: bob:secret
    method: POST
    url: /item/submit
    post: >
      {"action" : "submit"}

  response:
    headers:
      content-type: text/plain
    status: 200
    body: OK


- request:
    method: [POST]
    url: /uri/with/post/regex
    post: "^[\\.,'a-zA-Z\\s+]*$"

  response:
    - status: 200
      headers:
        content-type: application/json
      body: OK


- request:
    method: GET
    url: /empty.param
    query:
      type_name:
      client_secret: secret

  response:
    status: 200
    body: EMPTY WORKS


- request:
    method: GET
    url: /empty.single.param
    query:
      type_name:
  response:
    status: 200
    body: EMPTY SINGLE WORKS


- request:
    method: POST
    url: /complex/json/tree
    headers:
      content-type: application/json
    file: ../json/request/json_payload_3.json

  response:
    headers:
      content-type: application/json
    status: 200
    body: OK


- request:
    method: POST
    url: /complex/xml/tree
    headers:
      content-type: application/xml
    file: ../xml/request/xml_payload_1.xml

  response:
    headers:
      content-type: application/xml
    status: 200
    body: OK


- request:
    method: PUT
    url: /complex/json/tree/put
    file: ../json/request/json_payload_4.json

  response:
    headers:
      content-type: application/xml
    status: 201
    body: OK


- request:
    headers:
      authorization-bearer: Ym9iOndyb25nLXNlY3JldA==
    method: DELETE
    url: /item/auth/bearer/1

  response:
    headers:
      content-type: application/json
    status: 200
    body: >
      {"id" : "12", "description" : "deleted authorized using bearer"}


- request:
    method: [GET]
    url: /returns-not-found-response-with-body

  response:
    status: 404
    body: This response with body was actually not found


- uuid: 9136d8b7-f7a7-478d-97a5-53292484aaf6
  request:
    method: GET
    url: /with/configured/uuid/property

  response:
    headers:
      content-type: application/json
    status: 200
    body: >
      {"status" : "OK"}
